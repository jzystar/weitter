"""
Django settings for weitter project.

Generated by 'django-admin startproject' using Django 3.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

import sys
import os
from pathlib import Path
from kombu import Queue

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '0_zl_(2cfrn075p)sqs-g8^vo6-aj5_@$a(fm_*8^rh$74)a2s'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = ['127.0.0.1', '192.168.33.10', 'localhost']
INTERNAL_IPS = ["10.0.2.2"]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # third party
    'rest_framework',
    "debug_toolbar",
    'django_filters',
    'notifications',

    # project apps
    'accounts',
    'weits',
    'friendships',
    'newsfeeds',
    'comments',
    'likes',
    'inbox',
]

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
    ],
    'EXCEPTION_HANDLER': 'utils.ratelimit.exception_handler',
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    "debug_toolbar.middleware.DebugToolbarMiddleware",
]

ROOT_URLCONF = 'weitter.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'weitter.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'weitter',
        'HOST': 'localhost',
        'PORT': 3306,
        'USER': 'root',
        'PASSWORD': 'yourpassword',
        'OPTIONS': {'charset': 'utf8mb4'},
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'

# set different storages for test
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
TESTING = ((" ".join(sys.argv)).find('manage.py test') != -1)
if TESTING:
    DEFAULT_FILE_STORAGE = 'django.core.files.storage.FileSystemStorage'


# AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY is very secret, and they should not
# be visible for all developers, we can put it in local_settings.py or set it in
# env path variables
# AWS_ACCESS_KEY_ID = os.environ['AWS_ACCESS_KEY_ID']
# AWS_SECRET_ACCESS_KEY = os.environ['AWS_SECRET_ACCESS_KEY']
# AWS_STORAGE_BUCKET_NAME = os.environ['AWS_STORAGE_BUCKET_NAME']
# AWS_S3_REGION_NAME = os.environ['AWS_S3_REGION_NAME']
AWS_ACCESS_KEY_ID = 'AKIAXL4XL7VGL4Y5WA7X'
AWS_SECRET_ACCESS_KEY = '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'
AWS_STORAGE_BUCKET_NAME = 'django-weitter'
AWS_S3_REGION_NAME = 'ap-northeast-1'

MEDIA_ROOT = 'media/'

# https://docs.djangoproject.com/en/3.1/topics/cache/
# apt-get install memcached
# pip install python-memcached
# /usr/bin/memcached -u memcache -m 1024 -p 11211 -l 0.0.0.0 -d start
# telnet 127.0.0.1 11211 to check if it works
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
        'TIMEOUT': 86400,
    },
    'testing': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
        'TIMEOUT': 86400,
        'KEY_PREFIX': 'testing',
    },
    'ratelimit': {
        'BACKEND': 'django.core.cache.backends.memcached.MemcachedCache',
        'LOCATION': '127.0.0.1:11211',
        'TIMEOUT': 86400 * 7,
        'KEY_PREFIX': 'rl',
    },
}

# Redis
# sudo apt-get install redis
# install python redis client: pip install redis
# run redis: nohup redis-server > /dev/null 2>&1 &
# redis-cli to see if it's running
REDIS_HOST = '127.0.0.1'
REDIS_PORT = 6379
REDIS_DB = 0 if TESTING else 1
REDIS_KEY_EXPIRE_TIME = 7 * 86400
REDIS_LIST_LENGTH_LIMIT = 200 if not TESTING else 20

# https://docs.celeryq.dev/en/stable/django/first-steps-with-django.html?highlight=django
# Celery configuration
# use this command to run workers
# nohup celery -A weitter worker -l INFO > celery.logs &
CELERY_BROKER_URL = 'redis://127.0.0.1:6379/2' if not TESTING else 'redis://127.0.0.1:6379/0'
CELERY_TIMEZONE = 'UTC'
# 测试时直接运行任务，不需要异步执行了
CELERY_TASK_ALWAYS_EAGER = TESTING

CELERY_QUEUES = (
    Queue('default', routing_key='default'),
    Queue('newsfeeds', routing_key='newsfeeds'),
)
# 为了让不同worker运行不同类型任务，可以设置环境变量来判断运行的哪个queue
# if os.environ.get('WORKER_TYPE') == 'newsfeeds':
#     CELERY_QUEUES = (
#         Queue('newsfeeds', routing_key='newsfeeds'),
#     )
# else:
#     CELERY_QUEUES = (
#         Queue('default', routing_key='default'),
#     )

RATELIMIT_USE_CACHE = 'ratelimit'
RATELIMIT_CACHE_PREFIX = 'rl'
RATELIMIT_ENABLE = not TESTING

# Hbase 安装
# 1。 安装jdk 8，设置java环境变量 https://dlcdn.apache.org/hbase/
# 2。 解压后修改 hbase配置文件：conf/hbase-env.sh 修改 export JAVA_HOME
# 3。 修改 conf/hbase-site.xml 设置 property： hbase.rootdir和hbase.zookeeper.property.dataDir的value值作为存放目录
# 4。 sudo bash bin/start-hbase.sh 启动， bin/hbase shell 查看是否work，
# 5。 http://localhost:16010/ to check if it works， docker需要端口映射
# 6。 安装thrift，下载 https://thrift.apache.org/download.html
# 7。 下载依赖包 sudo apt-get install automake bison flex g++ git libboost-all-dev libevent-dev libssl-dev libtool make pkg-config
# 8。 解压thrift后编译安装 sudo ./configure & make & make install (因为只用于python，所以对于configure中的其他模块可以不安装，加上参数--with-xxx=no)
# 9。 启动hbase的thrift服务 bin/hbase-daemon.sh start thrift
# 10。安装python库 happybase

try:
    from .local_settings import *
except:
    pass
